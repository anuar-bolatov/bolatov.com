function openNav(){var e=document.getElementById("navbar");"navbar"===e.className?(e.className+=" responsive",document.body.style.overflowY="hidden"):(e.className="navbar",document.body.style.overflowY="visible")}$(document).ready(function(){var e=document.querySelector(".menu-toggle");e.addEventListener("click",function(){e.classList.toggle("menu-toggle-open")}),$(".menu-toggle").click(function(){$(this).toggleClass("menu-toggle-rotate")})}),$(document).ready(function(){$(".smooth-scroll").on("click",function(e){e.preventDefault();var t=$(this).data("scrollTo");$("html, body").animate({scrollTop:$(t).offset().top},650)})}),$(document).ready(function(){function e(){var e=n.height(),a=n.scrollTop(),r=a+e;$.each(t,function(){var e=$(this),t=e.outerHeight(),o=e.offset().top,n=o+t;n>=a&&o<=r&&e.addClass("in-view")}),$.each(o,function(){var e=$(this),t=e.outerHeight(),o=e.offset().top,n=o+t;n>=a&&o<=r&&e.addClass("in-view-rotate")})}var t=$(".animation-element"),o=$(".quote-icon"),n=$(window);n.on("scroll resize",e),n.trigger("scroll")}),$(".kiss-slider").kissSlider({paginationSelector:".kiss-pagination",autoscrollDelay:5e3});var today=new Date,year=today.getFullYear(),el=document.getElementById("copyright");el.innerHTML='<p property="dc:rights">&copy;<span property="dc:dateCopyrighted"> 2013-'+year+'<span property="dc:publisher"> Anuar Bolatov</span></p>';
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJvcGVuTmF2IiwieCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjbGFzc05hbWUiLCJib2R5Iiwic3R5bGUiLCJvdmVyZmxvd1kiLCIkIiwicmVhZHkiLCJidXR0b24iLCJxdWVyeVNlbGVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsYXNzTGlzdCIsInRvZ2dsZSIsImNsaWNrIiwidGhpcyIsInRvZ2dsZUNsYXNzIiwib24iLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwidGFyZ2V0IiwiZGF0YSIsImFuaW1hdGUiLCJzY3JvbGxUb3AiLCJvZmZzZXQiLCJ0b3AiLCJjaGVja19pZl9pbl92aWV3Iiwid2luZG93X2hlaWdodCIsIiR3aW5kb3ciLCJoZWlnaHQiLCJ3aW5kb3dfdG9wX3Bvc2l0aW9uIiwid2luZG93X2JvdHRvbV9wb3NpdGlvbiIsImVhY2giLCIkYW5pbWF0aW9uX2VsZW1lbnRzIiwiJGVsZW1lbnQiLCJlbGVtZW50X2hlaWdodCIsIm91dGVySGVpZ2h0IiwiZWxlbWVudF90b3BfcG9zaXRpb24iLCJlbGVtZW50X2JvdHRvbV9wb3NpdGlvbiIsImFkZENsYXNzIiwiJHF1b3RlX21hcmsiLCJ3aW5kb3ciLCJ0cmlnZ2VyIiwia2lzc1NsaWRlciIsInBhZ2luYXRpb25TZWxlY3RvciIsImF1dG9zY3JvbGxEZWxheSIsInRvZGF5IiwiRGF0ZSIsInllYXIiLCJnZXRGdWxsWWVhciIsImVsIiwiaW5uZXJIVE1MIl0sIm1hcHBpbmdzIjoiQUFJQSxRQUFTQSxXQUNMLEdBQUlDLEdBQUlDLFNBQVNDLGVBQWUsU0FDWixZQUFoQkYsRUFBRUcsV0FDRkgsRUFBRUcsV0FBYSxjQUNmRixTQUFTRyxLQUFLQyxNQUFNQyxVQUFZLFdBRWhDTixFQUFFRyxVQUFZLFNBQ2RGLFNBQVNHLEtBQUtDLE1BQU1DLFVBQVksV0FJeENDLEVBQUVOLFVBQVVPLE1BQU0sV0FFakIsR0FBSUMsR0FBU1IsU0FBU1MsY0FBYyxlQUNwQ0QsR0FBT0UsaUJBQWlCLFFBQVMsV0FDL0JGLEVBQU9HLFVBQVVDLE9BQU8sc0JBRzFCTixFQUFFLGdCQUFnQk8sTUFBTSxXQUN2QlAsRUFBRVEsTUFBTUMsWUFBWSwwQkFJdEJULEVBQUVOLFVBQVVPLE1BQU0sV0FFakJELEVBQUUsa0JBQWtCVSxHQUFHLFFBQVMsU0FBU0MsR0FDdkNBLEVBQU1DLGdCQUNOLElBQUlDLEdBQVNiLEVBQUVRLE1BQU1NLEtBQUssV0FDMUJkLEdBQUUsY0FBY2UsU0FDZEMsVUFBV2hCLEVBQUVhLEdBQVFJLFNBQVNDLEtBQzdCLFNBSU5sQixFQUFFTixVQUFVTyxNQUFNLFdBTWhCLFFBQVNrQixLQUNQLEdBQUlDLEdBQWdCQyxFQUFRQyxTQUN4QkMsRUFBc0JGLEVBQVFMLFlBQzlCUSxFQUEwQkQsRUFBc0JILENBRXBEcEIsR0FBRXlCLEtBQUtDLEVBQXFCLFdBQzFCLEdBQUlDLEdBQVczQixFQUFFUSxNQUNib0IsRUFBaUJELEVBQVNFLGNBQzFCQyxFQUF1QkgsRUFBU1YsU0FBU0MsSUFDekNhLEVBQTJCRCxFQUF1QkYsQ0FHakRHLElBQTJCUixHQUUvQk8sR0FBd0JOLEdBRXpCRyxFQUFTSyxTQUFTLGFBTXBCaEMsRUFBRXlCLEtBQUtRLEVBQWEsV0FDbEIsR0FBSU4sR0FBVzNCLEVBQUVRLE1BQ2JvQixFQUFpQkQsRUFBU0UsY0FDMUJDLEVBQXVCSCxFQUFTVixTQUFTQyxJQUN6Q2EsRUFBMkJELEVBQXVCRixDQUdqREcsSUFBMkJSLEdBRS9CTyxHQUF3Qk4sR0FFekJHLEVBQVNLLFNBQVMsb0JBckN0QixHQUFJTixHQUFzQjFCLEVBQUUsc0JBQ3hCaUMsRUFBY2pDLEVBQUUsZUFDaEJxQixFQUFVckIsRUFBRWtDLE9BMkNoQmIsR0FBUVgsR0FBRyxnQkFBaUJTLEdBQzVCRSxFQUFRYyxRQUFRLFlBR2xCbkMsRUFBRSxnQkFBZ0JvQyxZQUNoQkMsbUJBQW9CLG1CQUNwQkMsZ0JBQWlCLEtBRW5CLElBQUlDLE9BQVEsR0FBSUMsTUFDWkMsS0FBT0YsTUFBTUcsY0FFYkMsR0FBS2pELFNBQVNDLGVBQWUsWUFDakNnRCxJQUFHQyxVQUFZLDJFQUE2RUgsS0FBTyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBTbW9vdGggc2Nyb2xsaW5nIHRvIHRoZSB0b3Agb2YgdGhlIHBhZ2VcclxuICovXHJcblxyXG5mdW5jdGlvbiBvcGVuTmF2KCkge1x0XHJcbiAgICB2YXIgeCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmF2YmFyXCIpO1xyXG4gICAgaWYgKHguY2xhc3NOYW1lID09PSBcIm5hdmJhclwiKSB7XHJcbiAgICAgICAgeC5jbGFzc05hbWUgKz0gXCIgcmVzcG9uc2l2ZVwiO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3dZID0gXCJoaWRkZW5cIjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgeC5jbGFzc05hbWUgPSBcIm5hdmJhclwiO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3dZID0gXCJ2aXNpYmxlXCI7XHJcbiAgICB9XHJcblxyXG59XHJcbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7XHJcblxyXG5cdHZhciBidXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudS10b2dnbGUnKTtcclxuXHRidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKXtcclxuXHQgIGJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKCdtZW51LXRvZ2dsZS1vcGVuJyk7XHJcblx0fSk7XHJcblxyXG5cdCQoJy5tZW51LXRvZ2dsZScpLmNsaWNrKGZ1bmN0aW9uKCl7XHJcblx0XHQkKHRoaXMpLnRvZ2dsZUNsYXNzKCdtZW51LXRvZ2dsZS1yb3RhdGUnKTtcclxuXHR9KTtcclxuXHRcdFxyXG59KTtcclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXtcclxuXHJcblx0JCgnLnNtb290aC1zY3JvbGwnKS5vbignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xyXG5cdCAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHQgIHZhciB0YXJnZXQgPSAkKHRoaXMpLmRhdGEoJ3Njcm9sbFRvJyk7XHJcblx0ICAkKCdodG1sLCBib2R5JykuYW5pbWF0ZSh7XHJcblx0ICAgIHNjcm9sbFRvcDogJCh0YXJnZXQpLm9mZnNldCgpLnRvcFxyXG5cdCAgfSwgNjUwKTtcclxuXHR9KTtcclxuXHRcclxufSk7XHJcbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7XHJcblxyXG4gIHZhciAkYW5pbWF0aW9uX2VsZW1lbnRzID0gJCgnLmFuaW1hdGlvbi1lbGVtZW50Jyk7XHJcbiAgdmFyICRxdW90ZV9tYXJrID0gJCgnLnF1b3RlLWljb24nKTtcclxuICB2YXIgJHdpbmRvdyA9ICQod2luZG93KTtcclxuXHJcbiAgZnVuY3Rpb24gY2hlY2tfaWZfaW5fdmlldygpIHtcclxuICAgIHZhciB3aW5kb3dfaGVpZ2h0ID0gJHdpbmRvdy5oZWlnaHQoKTtcclxuICAgIHZhciB3aW5kb3dfdG9wX3Bvc2l0aW9uID0gJHdpbmRvdy5zY3JvbGxUb3AoKTtcclxuICAgIHZhciB3aW5kb3dfYm90dG9tX3Bvc2l0aW9uID0gKHdpbmRvd190b3BfcG9zaXRpb24gKyB3aW5kb3dfaGVpZ2h0KTtcclxuICAgXHJcbiAgICAkLmVhY2goJGFuaW1hdGlvbl9lbGVtZW50cywgZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciAkZWxlbWVudCA9ICQodGhpcyk7XHJcbiAgICAgIHZhciBlbGVtZW50X2hlaWdodCA9ICRlbGVtZW50Lm91dGVySGVpZ2h0KCk7XHJcbiAgICAgIHZhciBlbGVtZW50X3RvcF9wb3NpdGlvbiA9ICRlbGVtZW50Lm9mZnNldCgpLnRvcDtcclxuICAgICAgdmFyIGVsZW1lbnRfYm90dG9tX3Bvc2l0aW9uID0gKGVsZW1lbnRfdG9wX3Bvc2l0aW9uICsgZWxlbWVudF9oZWlnaHQpO1xyXG5cclxuICAgICAgLy9jaGVjayB0byBzZWUgaWYgdGhpcyBjdXJyZW50IGNvbnRhaW5lciBpcyB3aXRoaW4gdmlld3BvcnRcclxuICAgICAgaWYgKChlbGVtZW50X2JvdHRvbV9wb3NpdGlvbiA+PSB3aW5kb3dfdG9wX3Bvc2l0aW9uKSAmJlxyXG5cclxuICAgICAgKGVsZW1lbnRfdG9wX3Bvc2l0aW9uIDw9IHdpbmRvd19ib3R0b21fcG9zaXRpb24pKSB7XHJcblxyXG4gICAgICAkZWxlbWVudC5hZGRDbGFzcygnaW4tdmlldycpO1xyXG5cclxuICAgICAgfVxyXG5cclxuICAgIH0pO1xyXG5cclxuICAgICQuZWFjaCgkcXVvdGVfbWFyaywgZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciAkZWxlbWVudCA9ICQodGhpcyk7XHJcbiAgICAgIHZhciBlbGVtZW50X2hlaWdodCA9ICRlbGVtZW50Lm91dGVySGVpZ2h0KCk7XHJcbiAgICAgIHZhciBlbGVtZW50X3RvcF9wb3NpdGlvbiA9ICRlbGVtZW50Lm9mZnNldCgpLnRvcDtcclxuICAgICAgdmFyIGVsZW1lbnRfYm90dG9tX3Bvc2l0aW9uID0gKGVsZW1lbnRfdG9wX3Bvc2l0aW9uICsgZWxlbWVudF9oZWlnaHQpO1xyXG5cclxuICAgICAgLy9jaGVjayB0byBzZWUgaWYgdGhpcyBjdXJyZW50IGNvbnRhaW5lciBpcyB3aXRoaW4gdmlld3BvcnRcclxuICAgICAgaWYgKChlbGVtZW50X2JvdHRvbV9wb3NpdGlvbiA+PSB3aW5kb3dfdG9wX3Bvc2l0aW9uKSAmJlxyXG5cclxuICAgICAgKGVsZW1lbnRfdG9wX3Bvc2l0aW9uIDw9IHdpbmRvd19ib3R0b21fcG9zaXRpb24pKSB7XHJcblxyXG4gICAgICAkZWxlbWVudC5hZGRDbGFzcygnaW4tdmlldy1yb3RhdGUnKTtcclxuXHJcbiAgICAgIH1cclxuXHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuICAkd2luZG93Lm9uKCdzY3JvbGwgcmVzaXplJywgY2hlY2tfaWZfaW5fdmlldyk7XHJcbiAgJHdpbmRvdy50cmlnZ2VyKCdzY3JvbGwnKTtcclxuXHJcbn0pO1xyXG4kKCcua2lzcy1zbGlkZXInKS5raXNzU2xpZGVyKHtcclxuICBwYWdpbmF0aW9uU2VsZWN0b3I6ICcua2lzcy1wYWdpbmF0aW9uJyxcclxuICBhdXRvc2Nyb2xsRGVsYXk6IDUwMDBcclxufSk7XHJcbnZhciB0b2RheSA9IG5ldyBEYXRlKCk7XHJcbnZhciB5ZWFyID0gdG9kYXkuZ2V0RnVsbFllYXIoKTtcclxuXHJcbnZhciBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb3B5cmlnaHQnKTtcclxuZWwuaW5uZXJIVE1MID0gJzxwIHByb3BlcnR5PVwiZGM6cmlnaHRzXCI+JmNvcHk7PHNwYW4gcHJvcGVydHk9XCJkYzpkYXRlQ29weXJpZ2h0ZWRcIj4gMjAxMy0nICsgeWVhciArICc8c3BhbiBwcm9wZXJ0eT1cImRjOnB1Ymxpc2hlclwiPiBBbnVhciBCb2xhdG92PC9zcGFuPjwvcD4nOyJdfQ==
